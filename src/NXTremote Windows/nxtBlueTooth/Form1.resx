<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAArGgAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAFzAAABcwgGAAAAzLrpkgAAGfJJ
        REFUeJzt3XtQ3Wd+3/HPc4ADAoQEQqALQog7CBASkr2+xM56vVlPu+k0bTbJTLzTbTvbbtvpTDLdNm3S
        ppM2M81s+0fbaTaZNtk2s2nrZjydThu3drxr79qV5driIkDcQQhdECAhrgIOcJ7+IeEVFkiHA+L5nee8
        XzP+w3AO5zs66D1Hv+/5nZ/RDrF2KleR0EtRhZ43spWSKmV1UMZkSjZrpx4HABKPmZe192Q0IanPyvSG
        bPQjpa9+YEzu1I48wnbubO1UrpZTfsFG9XUZPScptBNDAUCSWJXVBRPS95W28ifbCXtcMbdzc4eiafoV
        I/t3JWXG++AAgM8sWas/CkVTfttkZl7b6p23FHNrbWY0MvfrRvq2pPStPhgA4IkWrfQvQ+Hsf2GMWYj1
        TjHH3C7PvGCjoe9L9kR88wEAtmDIhOzrJi3nQiw3fuIxbmutsUszv2aj5keEHAB2TamNmh/bxbm/F8uN
        H/vK3FqbEl2a+11j9Dd3ZjYAwFZZmf8YCmf9DWPMyma32TTm1toUG5n7r5K+9lSmAwDEzEpvhMLZrxtj
        Vjf6/oaHWay1Jro093vaQshtnAMCQLLaSjeN9EvRpbl/t9n3Nz5mHpn9+8bom1sZaltvWAeAJLTVbhqj
        b212DP2Rn3X/XSvmR5JS45gNAPB0LRsTfcmE93388BfXxdxau8dG5i/zrhUACLQBE86uN8Ysrn1h3WGW
        aGTuNwg5AAReeTQy9w8f/sJnr8ztvXvHbMpqvzizEwASwaJZCZWZrKyb0kOvzKOpq5yiDwCJIyOatvrZ
        MtRI9z/90EZSrosPzQKABGLmTXi5yJjcqfuvzJdTfkGEHAASjM3ScsrXpAeHWWxUX3c7EAAgHjZqXpck
        8+AQy4SklA1vKE4IAoAAWzXh5QMhRUIvaZOQS4QcAAIuRUupL4WiCj3nehIAQPyiJvRcyMhWux4EABA/
        I1sVklThehAAwLZUhmSU73oKAMC25Idktdf1FACA7TB7Q5IyXI8BANgOmxkS7z4EgERnNr7SEAAgoRBz
        APAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcA
        DxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAA
        MQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBz
        APAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcA
        DxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAAMQcADxBzAPAA
        MQcADxBzAPBAqusBkGBmp6SZO9JyxPUk/koLS/vypex9ridBAiHmeLK7YzLvviG1vC9N3HA9TfI4WCSd
        +aLsl39Ryi10PQ0CzkSXZq3rIRBQ1kpvfU/mrf8kRRZdT5O8whmyX/1r0p/7hmSM62kQUMQcG1tdlfkP
        /0T69F3Xk2DNM1+W/eY/l0IpridBALEAxYbMf/vXhDxoPnlX5k/+respEFDEHI/qa5N++IbrKbCRd/+L
        1HPR9RQIIBagCWzy7rS6evp1a2xC1kZ1MD9PdbXVyj+Qu62fa/777+7QhHgazP/897LVZ7f1M27fuavO
        rh5N3J6UMSEdKjyo2uoK5eXyDppExTHzBHRvYUGXOro0MDQia9c/fcYYvfTCMzp+7Gh8P3zylsw/+Av3
        l58IJmNkv/O/pLz43uFy9doNfXD+kw1/d8pLi3WqvlaZe/bsxKTYRbwyTyArK6vq7O5TV0+fVlZWN7yN
        tVYXPmnRkUOFSkuL4+nt+pSQB521Utcn0os/u+W7Li+v6MInLY+E/P6PteofvKorV6+rtrpSdTWVSk1l
        2ZooiHkCsNZqYGhEbe2XtbD45LcIRiLLGh2bUHHR4a0/2J3ROCbErpu8FdfdRscmFIksP/Y2Kyurau/s
        Vv/AFTU2nFR5abEMb4kMPGIecDdvjam5tVN3p6a3dL+FhfjeF27mZ+K6H3aXmZtWPP9+2srvxcLioi58
        0qyevgE1na7TkUOcuBRkxDygpmdmdamjS8Mj8Z5xGeehEg6xJIa4n6et3+/u1LR+8P55HS4sUNPpepak
        AUXMA2ZpKaL2zh719A9ueFwTcGV0bFxvvfOeSkuO6UxjnfZkZLgeCQ8h5gGxsrKirt4BdXb1brrcBFyz
        1mrwyoiuXruhutoq1VaVKzWVjAQBz0IADI/cUEtbh+bm77keBYjJysqq2tq71Nd/RQ111aooK2FJ6hgx
        d2h0bELNrR2avDvlehQgLvcWFvTxp63q6RvQmcZ6FR055HqkpEXMHZiemdOljsvbWG4CwTI1Pav3fvyR
        DhcW6OyZeuXuZ0m624j5LlpcWtKljm71DVxhuQkvjY6N60/ffk+V5Sd0qr5GGenprkdKGsR8F0SjUfUO
        DOlSR/cTT9gAEp21Vr39Qxq8clW11ZWqr61USgpnkj5txPwpY7mJZLV2JunA4DBL0l1AzJ+SiduTam5r
        1/jEpOtRAKfWlqT9g8NqOl2nQwUHXY/kJWK+w2Zm59TWznIT+Lw7k3f1Zz/8UIcLC3SuqUH79+W4Hskr
        xHyHLC1FdLm7T919g1pd5aQfYDNrS9Ly0uNqbKhlSbpDiPk2sdwEti4ajapv4IqGhkdYku4QYr4N127c
        0sWWS5qdm3c9CpCQ1pakg0NX1dhQo7ITx12PlLCIeRxu37mri63tGp+443oUwAvz9+7p/MfN6u2/oqbG
        OhUW5LseKeEQ8y2Yv3dPbe1dGrwy4noUwEu370zqnR9+oKIjh3Su6ZT2Zme5HilhEPMYRCLL6uzqZbkJ
        7JLrN2/p5q3x+0vS+lplZLAkfRJi/hjRaFQ9/YNq7+xhuQnssrUl6fDIdTXUVau6okyhUMj1WIFFzDfB
        chMIhkhkWRdbOtTdM8iS9DGI+efcvjOp5rZOjY3fdj0KgIf8ZEk6pLOnG1Rw8IDrkQKFmD/AchNIDLfv
        3NXbP/gxS9LPSfqYRyLL6rjcq55+lptAIrl+85ZGxyZUXVGm+pNVCofTXI/kVNLGPBqNamDoqtrau7S4
        tOR6HABxWF1d1eWePg1cGdbJmkrVVJYl7ZmkSRnz0bFxfdrcrqnpGdejANgBS0sRtbR1amBwWI0NJ1VS
        fNT1SLsuqWLOchPw28zsnD44///U25+vpsY65R/Icz3SrkmKmN9bWFB7Z4/6B4e5XBuQBMbGb+t//9mP
        VFJ8VGca65Wdlel6pKfO65ivrKyqs7tPl7v7WG4CSWh45IZGro+qqrxUp+prvF6Sehlza636B4d1qaNL
        C4ssN4FkFo1G1d03oKGrIzpZU6naqnIvzyT1LuajY+O62NKhu1PTrkcBECBrS9LBoWGdqvdvSepNzKem
        Z9TS1qnrN2+5HgVAgE3P3F+S9g8c1JnGeh3I2+96pB2R8DFnuQkgHqNjE3rrnfe8WZImbMxXVlbV0z+o
        jss9Wl5ecT0OgAQ1PHJD12+OqbqiVPUnq5WWlphZTLiprbUaGh5RS9tlLSwuuh4HgAdWVlbU2d2n/qHh
        zz5u1xjjeqwtSaiYs9wE8DQtLUX0aXO7+vqv6FR9bUItSRMi5tMzs2pu7WC5CWBXTM/MPliSFqjpdJ3y
        coO/JA10zFluAnBpdGxcb73zvo4fO6Km0/XKygzukjSQMV9ZWVFP/xDLTQDOWWsTYkkaqImstbp67aZa
        2jo0N3/P9TgA8Jm1JenQ8DU11FWroqwkUEvSwMR8dGxcza2dmrw75XoUANjUvYUFffxpq7p7B9R0ul5F
        Rw65HklSAGK+tBTRhU+aNXJ91PUoABCz6ZlZvffjj1RcdFjPPdOk9PSw03mcftqMtVbvf3iBkANIWCPX
        R/X+hxecv0nDacyv3xzT+MQdlyMAwLaNT9zR9ZtjTmdwGvPbtwk5AD+47pnTmKekJueFVwH4x3XPnMY8
        KFtgANgu1z1zGvO83P2qrapwOQIAbFttVYXzU/6dvzXx7Jl67d2bpbaOLi0tRVyPAwAxS08Pq7G+VlUV
        pa5HcR9zSaqqKNWJ48fU2dWr7r5BLr4MINBCoZDKS4+rsb5WGRnprseRFJCYS1I4nKYzjXWqqixVW3uX
        Bq+MuB4JAB5RdOSQzjWd0t7sLNejrBOYmK/JyszUC184q6qKMl1sbed96AACIf9Anpoa61VYcMD1KBsK
        XMzX5B/I1WuvvqxrN27pYsslzc7Nux4JQBLKysxUY0ONyk4cdz3KYwU25muOHT2ko4cLNDB0Va3tl1mS
        AtgV4XCa6mqrVFNZppSU4J8TE/iYS/eXDZXlJ3T82FFd7u5jSQrgqflsudlQq4z0YCw3Y5EQMV+Tnh7W
        mcY6lZeVqK39soZHbrgeCYBHDhcW6FxTg/bvy3E9ypYlVMzX5OzN1ksvPKuaqkk1t7VrfGLS9UgAEtiB
        vFydPV2vwoJ816PELSFjvuZgfp5ee/WnNTxyg6sTAdiyzD17AnnVoHgkdMzXlBQfVXHRYfUODOlSR7ci
        kWXXIwEIsNTUFNVWV6q+tjIhlpux8CLm0v2lRU1luUqPF+tyd5+6egcUjUZdjwUgQIwxqigr0an6Wu0J
        yJmbO8WbmK9hSQpgI4m83IyFdzFfs7YkrayYUHNrh+5McqFoIBkdyNuvptP1OlRw0PUoT5W3MV9zqOCg
        /vxXXmFJCiQZn5absfA+5mtKio+q6EihunoHdbm7V8vLK65HAvAUpKamqLqiTA11NUpNoquZJU3MJSk1
        NVUNJ6tUVX5C7Z096ukfdH5FbQA7wxij0pJjOtNYpz0ZGa7H2XVJFfM16elhnWtqUGXFCV3q6GJJCiS4
        w4UFOnumXrn797kexZmkjPmafTl79dILz6q8bFzNrR26OzXteiQAW5CXu09Np+t1uLDA9SjOJXXM1xw5
        VKDDr72iq9dusiQFEkCyLTdjQcwfMMZ8tiTt6R9Sx+UelqRAwKSmpqq6olT1J6uVlka+Hsafxuekpqaq
        rqZSpSXH1N7Zo/7BYZakgGPJvtyMBTHfROaePfrCudOqqihVc2uHbt4adz0SkJSOHCpU0+m6pF5uxoKY
        P0Hu/n169YsvanRsXBdbWJICu2Vfzl6dqq9VSfFR16MkBGIeo8OFBfrqa69oaHhELW2XtbC46HokwEvp
        6WE11FWruqKM5eYWEPMtMMao7MRxHT9WpJ7+QZakwA5iubk9/InFITU1hSUpsINKio/qTGO9srMyXY+S
        sIj5NqwtSasry9TS1qnrN2+5HglIKIcLD6rpdL3ycve7HiXhEfMdsH9fjl55+XmWpECM9uVk61T9SZab
        O4iY76C1JWn/4LAudXRpYXHJ9UhAoLDcfHqI+Q4zxqiy/IRKS4rV2d2ny919Wl1ddT0W4FQoFFJVealO
        1dcoHE5zPY6XiPlTkpqaosb6GlWWl7AkRVJjubk7iPlTtrYkrSgrUXNrp26NT7geCdgVB/Pz1NTYoIKD
        ea5HSQrEfJccyMvVz3zppzRyfVQtbR2amZ1zPRLwVOTszdaZxnoVFx12PUpSIea7rLjosIqOFGpg6Kra
        2ru0uMSSFH5ITw/rZE2lairLlJKSPJdrCwpi7kAoFGJJCm+w3AwGYu7Q2pK0vPS4Wi916srV665HArbk
        xPEinT5Vx3IzAIh5AGRnZeqnnn9GNVXlam7r1Nj4bdcjAY+VfyBXZ083qODgAdej4AFiHiD5B/L0lS+9
        pGs3buliyyXNzs27HglYJyszU40NNSo7cdz1KPgcYh5Ax44e0tHDBfeXpB1dWuRMUjgWDqeprraK5WaA
        EfOAWluSHj92VB2Xe9XTP6hoNBrz/Y0JxffA/EVNDHE+T1v9vQiFQqquKFNDXTXLzYAj5gGXnh7W2TP1
        qqosVUtbp65euxHT/XJysuJ6PJtzQHxiRvDZfflx3W8rvxfHjx3VmcY67c2O73cJu4uYJ4i92Vl6+cVn
        NT4xqea2dk3cntz0tvv35ajwYHx/2XWoOM4JsasK43ueCg/ma/++HE1Nz2x6G87cTEwmujTLB4YkoOGR
        62pp69Tc/L11X8/OytSrX3xROXuz4/vBiwsyv/JlaZnj9IGVGpb9N+9KGfG9HXBmdk4/eP//bvi7c6ax
        TiXFRTsxJXYZMU9gq6urGh65rrHx27LWKv/AAZWdKFZq6vaOe5vv/ZZ0/k93aErsuBd/Vvav/ua2fsTK
        yqoGr4zo9p07MsaosCBfJcVFLDcTGDHHoyZvyfzG16QIF60OnPQM2d9+U8ordD0JAibOtzzAa3mHZL/5
        zyQuHhAsxsh+4zcJOTZEzLGxM1+U/Sv/WErl7WiBkJp2//l45suuJ0FAcZgFjzfYKfPGv5KGLrueJHmV
        1cn+0rel0pOuJ0GAEXM8mbVSz0WZ5velq13S5Li0zPH0pyYtQ8orkEpOyjb9tFR1lkNeeCJiDgAe4Jg5
        AHiAmAOAB4g5AHiAmAOAB4g5AHiAmAOAB4g5AHiAmAOAB4g5AHiAmAOAB4g5AHiAmAOAB4g5AHiAmAOA
        B1JdD4DEcWNiUldujmtqbl6RyLLrcbwVDqcpd2+2Sg4f1NGDea7HQYIg5nisqLU6f6lX73zcovG7M67H
        SToFuTl67bkzer6hSiEuUIHH4OIU2NT0/D199823deXmuOtRkl7Z0UJ96y9/RfuyMl2PgoAi5tjQ1Ny8
        fueP/ocmZ2Zdj4IH8nL26h994+cIOjbEAhSPWI1G9d033yHkATM5M6vvvvm2otGo61EQQMQcj/iwtVvD
        oxxaCaIrN8f14aUe12MggIg51rFWevtCq+sx8Bj/56NWWQ6O4nOIOdYZHh3X5Oyc6zHwGJMzs7p6i385
        YT1ijnWujI65HgExGOIdRvgcYo51pmbmXY+AGMzM8jxhPWKOdSLLK65HQAwWOQMXn0PMAcADxBwAPEDM
        AcADxBwAPEDMAcADxBwAPEDMAcADxBwAPEDMAcADxBwAPEDMAcADxBwAPEDMAcADxBwAPEDMAcADxBwA
        PEDMAcADxBwAPEDMAcADxBwAPEDMAcADxBwAPEDMAcADxBwAPEDMAcADxBwAPEDMAcADxBwAPEDMAcAD
        xBwAPEDMAcADxBwAPEDMAcADxByfY1wPgJjwPGE9Yo51sjLTXY+AGGRlZrgeAQFDzLFOXs5e1yMgBgdy
        sl2PgIAh5ljnZGkR/4APOCOp5sRR12MgYIg51tmfnaXyY4ddj4HHqCg+oty9vDLHesQcj/i5l591PQIe
        4y++/IzrERBAxByPKD92SK+ea3A9BjbwM8+cUnnRIddjIICIOTb08196Tudqyl2PgYecqy3XX3rlC67H
        QECZ6NKsdT0Egsla6e2PW/XW+RZFlpddj5O0wmlp+uqLTfrKs40ybKexCWKOJ5qam9cPP2lXa98Vjd+d
        cT1O0ijI3aczVSf0yrl67c/Ocj0OAo6YY0vmF5Y0PT+v5ZVV16N4Ky01Rfuzs5SZwQlciB0xBwAPsAAF
        AA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDw
        ADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8Q
        cwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEH
        AA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDw
        ADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8QcwDwADEHAA8Q
        cwDwADEHAA8QcwDwQEiSdT0EAGBbbEjSguspAADbYe6FZDTregwAwHbY2ZCs7rgeAwCwLbdDkvpcTwEA
        2Ja+kJXpdT0FACB+VqY3FLLRj1wPAgCIX8hGLxhr7+63kdTbklI2upGVZHZ3LgBA7FZMeDk/ZEzulKw2
        fXVOyAEgwKzOG5M3HZIkE9Ifu54HALB1JmS/Lz144W3tVK6NpF6TbJbbsQAAsTPzJhw5+pNX5mb/XWvs
        H7geCwAQO2uiv29M3rT00CFxe+9ekU1Z7ZeU4WwyAECsFsxKqMxkZY1KD31qosnMvG6l77ibCwAQKyP9
        zlrIH/z/T1hr99jIXKek0l2fDAAQq34Tzm4wxiyufWHd55kbYxZMyL4uaXnXRwMAxCJiTPT1h0MubXBx
        CpOWc8FY8+u7NxcAIFbGml8z4X2fPPL1ze6wujj7e8boW093LABArKzVd1My9v6djb63acyttSnRyNx/
        NtIvPr3RAACxsNIboXD2Lxtjoht9f9NrgBpjVkPh7F+2Vr//9MYDADyJlfleKJz99c1CLj3hgs7GmNWU
        jL1/y1jzbbEUBYDdFjHW/GpKevZfN8asPO6GMX+Olo1Mf8Ha0B9LKtv2eACAJ+k3Jvr6RsvOjTz2lfnD
        THjfxyacXWel35K0+MQ7AADisWCkf2rC2Q2xhlyK8xNu7exsQTSsv22kX5WUE8/PAAA8zMxbY/8wtJLy
        HZOZeWPL997OQ1t7d7+WU37eRs3XZfSCNrnABQBgQyuyOm9C9vtKW3lz7UOz4rFj156w9k6OltJejprQ
        80a2UlKljA7Kmmw+WhdAkpt78N9tSX1Wpjdkox8pffkDYw7M7MQD/H+KOcvRa7HrYAAAAABJRU5ErkJg
        gg==
</value>
  </data>
</root>